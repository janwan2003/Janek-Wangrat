-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Janeklang.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Janeklang.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Janeklang.Abs.Ident -> Result
transIdent x = case x of
  Janeklang.Abs.Ident string -> failure x

transProgram :: Show a => Janeklang.Abs.Program' a -> Result
transProgram x = case x of
  Janeklang.Abs.PProg _ topdefs -> failure x

transTopDef :: Show a => Janeklang.Abs.TopDef' a -> Result
transTopDef x = case x of
  Janeklang.Abs.PFnDef _ type_ ident args block -> failure x
  Janeklang.Abs.PVarDef _ type_ ident expr -> failure x

transArg :: Show a => Janeklang.Abs.Arg' a -> Result
transArg x = case x of
  Janeklang.Abs.PAr _ type_ ident -> failure x
  Janeklang.Abs.PArRef _ type_ ident -> failure x

transBlock :: Show a => Janeklang.Abs.Block' a -> Result
transBlock x = case x of
  Janeklang.Abs.SBlk _ stmts -> failure x

transStmt :: Show a => Janeklang.Abs.Stmt' a -> Result
transStmt x = case x of
  Janeklang.Abs.SEmpty _ -> failure x
  Janeklang.Abs.SBStmt _ block -> failure x
  Janeklang.Abs.SAss _ ident expr -> failure x
  Janeklang.Abs.SRet _ expr -> failure x
  Janeklang.Abs.SVRet _ -> failure x
  Janeklang.Abs.SCond _ expr block -> failure x
  Janeklang.Abs.SCondElse _ expr block1 block2 -> failure x
  Janeklang.Abs.SWhile _ expr block -> failure x
  Janeklang.Abs.SExp _ expr -> failure x
  Janeklang.Abs.SNestedFnDef _ topdef -> failure x
  Janeklang.Abs.SBreak _ -> failure x
  Janeklang.Abs.SContinue _ -> failure x
  Janeklang.Abs.SPrint _ expr -> failure x

transType :: Show a => Janeklang.Abs.Type' a -> Result
transType x = case x of
  Janeklang.Abs.TInt _ -> failure x
  Janeklang.Abs.TStr _ -> failure x
  Janeklang.Abs.TBool _ -> failure x
  Janeklang.Abs.TVoid _ -> failure x
  Janeklang.Abs.Fun _ type_ types -> failure x

transExpr :: Show a => Janeklang.Abs.Expr' a -> Result
transExpr x = case x of
  Janeklang.Abs.EVar _ ident -> failure x
  Janeklang.Abs.ELitInt _ integer -> failure x
  Janeklang.Abs.ELitTrue _ -> failure x
  Janeklang.Abs.ELitFalse _ -> failure x
  Janeklang.Abs.EApp _ ident exprs -> failure x
  Janeklang.Abs.EString _ string -> failure x
  Janeklang.Abs.ENeg _ expr -> failure x
  Janeklang.Abs.ENot _ expr -> failure x
  Janeklang.Abs.EMul _ expr1 mulop expr2 -> failure x
  Janeklang.Abs.EAdd _ expr1 addop expr2 -> failure x
  Janeklang.Abs.ERel _ expr1 relop expr2 -> failure x
  Janeklang.Abs.EAnd _ expr1 expr2 -> failure x
  Janeklang.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Janeklang.Abs.AddOp' a -> Result
transAddOp x = case x of
  Janeklang.Abs.OPlus _ -> failure x
  Janeklang.Abs.OMinus _ -> failure x

transMulOp :: Show a => Janeklang.Abs.MulOp' a -> Result
transMulOp x = case x of
  Janeklang.Abs.OTimes _ -> failure x
  Janeklang.Abs.ODiv _ -> failure x
  Janeklang.Abs.OMod _ -> failure x

transRelOp :: Show a => Janeklang.Abs.RelOp' a -> Result
transRelOp x = case x of
  Janeklang.Abs.OLTH _ -> failure x
  Janeklang.Abs.OLE _ -> failure x
  Janeklang.Abs.OGTH _ -> failure x
  Janeklang.Abs.OGE _ -> failure x
  Janeklang.Abs.OEQU _ -> failure x
  Janeklang.Abs.ONE _ -> failure x

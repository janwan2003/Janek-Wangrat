-- programs 

entrypoints Program ;

PProg.   Program ::= [TopDef] ;

PFnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

PVarDef.     TopDef ::= Type Ident "=" Expr ";" ;

separator nonempty TopDef "" ;

PAr. 	   Arg ::= Type Ident;

PArRef.   Arg ::= "ref" Type Ident;

separator  Arg "," ;

-- statements 

SBlk.       Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

SEmpty.     Stmt ::= ";" ;

SBStmt.     Stmt ::= Block ;

SAss.       Stmt ::= Ident "=" Expr  ";" ;

SRet.       Stmt ::= "return" Expr ";" ;

SVRet.      Stmt ::= "return" ";" ;

SCond.      Stmt ::= "if" "(" Expr ")" Block  ;

SCondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

SWhile.     Stmt ::= "while" "(" Expr ")" Block ;

SExp.      Stmt ::= Expr  ";" ;

SNestedFnDef. Stmt ::= TopDef ;

SBreak.     Stmt ::= "break" ;

SContinue. Stmt ::= "continue" ;

SPrint. Stmt ::= "print" "(" Expr ")" ";" ;

-- Types 

TInt.       Type ::= "int" ;

TStr.       Type ::= "string" ;

TBool.      Type ::= "bool" ;

TVoid.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;


-- Expressions 

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

ENeg.       Expr5 ::= "-" Expr6 ;

ENot.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators 

OPlus.      AddOp ::= "+" ;

OMinus.     AddOp ::= "-" ;

OTimes.     MulOp ::= "*" ;

ODiv.       MulOp ::= "/" ;

OMod.       MulOp ::= "%" ;

OLTH.       RelOp ::= "<" ;

OLE.        RelOp ::= "<=" ;

OGTH.       RelOp ::= ">" ;

OGE.        RelOp ::= ">=" ;

OEQU.       RelOp ::= "==" ;

ONE.        RelOp ::= "!=" ;

-- comments 

comment    "//" ;

comment    "/*" "*/" ;

